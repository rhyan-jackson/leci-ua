// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 22.1std.2 Build 922 07/20/2023 SC Lite Edition"

// DATE "10/26/2023 14:30:43"

// 
// Device: Altera EP4CE6E22C6 Package TQFP144
// 

// 
// This Verilog file should be used for Questa Intel FPGA (Verilog) only
// 

`timescale 1 ps/ 1 ps

module EqCmp4 (
	cmpOut,
	input1,
	input0);
output 	cmpOut;
input 	[3:0] input1;
input 	[3:0] input0;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \cmpOut~output_o ;
wire \input1[3]~input_o ;
wire \input1[2]~input_o ;
wire \input0[2]~input_o ;
wire \input0[3]~input_o ;
wire \inst10~0_combout ;
wire \input1[1]~input_o ;
wire \input1[0]~input_o ;
wire \input0[0]~input_o ;
wire \input0[1]~input_o ;
wire \inst10~1_combout ;
wire \inst10~combout ;


cycloneive_io_obuf \cmpOut~output (
	.i(\inst10~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\cmpOut~output_o ),
	.obar());
// synopsys translate_off
defparam \cmpOut~output .bus_hold = "false";
defparam \cmpOut~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \input1[3]~input (
	.i(input1[3]),
	.ibar(gnd),
	.o(\input1[3]~input_o ));
// synopsys translate_off
defparam \input1[3]~input .bus_hold = "false";
defparam \input1[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \input1[2]~input (
	.i(input1[2]),
	.ibar(gnd),
	.o(\input1[2]~input_o ));
// synopsys translate_off
defparam \input1[2]~input .bus_hold = "false";
defparam \input1[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \input0[2]~input (
	.i(input0[2]),
	.ibar(gnd),
	.o(\input0[2]~input_o ));
// synopsys translate_off
defparam \input0[2]~input .bus_hold = "false";
defparam \input0[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \input0[3]~input (
	.i(input0[3]),
	.ibar(gnd),
	.o(\input0[3]~input_o ));
// synopsys translate_off
defparam \input0[3]~input .bus_hold = "false";
defparam \input0[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst10~0 (
// Equation(s):
// \inst10~0_combout  = (\input1[3]~input_o  & (\input0[3]~input_o  & (\input1[2]~input_o  $ (!\input0[2]~input_o )))) # (!\input1[3]~input_o  & (!\input0[3]~input_o  & (\input1[2]~input_o  $ (!\input0[2]~input_o ))))

	.dataa(\input1[3]~input_o ),
	.datab(\input1[2]~input_o ),
	.datac(\input0[2]~input_o ),
	.datad(\input0[3]~input_o ),
	.cin(gnd),
	.combout(\inst10~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst10~0 .lut_mask = 16'h8241;
defparam \inst10~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \input1[1]~input (
	.i(input1[1]),
	.ibar(gnd),
	.o(\input1[1]~input_o ));
// synopsys translate_off
defparam \input1[1]~input .bus_hold = "false";
defparam \input1[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \input1[0]~input (
	.i(input1[0]),
	.ibar(gnd),
	.o(\input1[0]~input_o ));
// synopsys translate_off
defparam \input1[0]~input .bus_hold = "false";
defparam \input1[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \input0[0]~input (
	.i(input0[0]),
	.ibar(gnd),
	.o(\input0[0]~input_o ));
// synopsys translate_off
defparam \input0[0]~input .bus_hold = "false";
defparam \input0[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \input0[1]~input (
	.i(input0[1]),
	.ibar(gnd),
	.o(\input0[1]~input_o ));
// synopsys translate_off
defparam \input0[1]~input .bus_hold = "false";
defparam \input0[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst10~1 (
// Equation(s):
// \inst10~1_combout  = (\input1[1]~input_o  & (\input0[1]~input_o  & (\input1[0]~input_o  $ (!\input0[0]~input_o )))) # (!\input1[1]~input_o  & (!\input0[1]~input_o  & (\input1[0]~input_o  $ (!\input0[0]~input_o ))))

	.dataa(\input1[1]~input_o ),
	.datab(\input1[0]~input_o ),
	.datac(\input0[0]~input_o ),
	.datad(\input0[1]~input_o ),
	.cin(gnd),
	.combout(\inst10~1_combout ),
	.cout());
// synopsys translate_off
defparam \inst10~1 .lut_mask = 16'h8241;
defparam \inst10~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb inst10(
// Equation(s):
// \inst10~combout  = (\inst10~0_combout  & \inst10~1_combout )

	.dataa(\inst10~0_combout ),
	.datab(\inst10~1_combout ),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst10~combout ),
	.cout());
// synopsys translate_off
defparam inst10.lut_mask = 16'h8888;
defparam inst10.sum_lutc_input = "datac";
// synopsys translate_on

assign cmpOut = \cmpOut~output_o ;

endmodule
